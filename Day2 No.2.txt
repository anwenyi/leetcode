2. Add Two Numbers

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
        ListNode head = new ListNode();
        ListNode cur = new ListNode();
        ListNode temp;
        boolean jinwei = false;
        int counter = 0;
    
        while(l1 != null || l2 != null) {
            if (l1 == null) {
                l1 = new ListNode(0);
            }
             if (l2 == null) {
                l2 = new ListNode(0);
            }
            if (((l1.val + l2.val) >= 10 || (l1.val + l2.val == 9 && jinwei==true))) {              
                int tempV = jinwei ? (l1.val + l2.val -10 + 1) : (l1.val + l2.val - 10);              
                temp = new ListNode(tempV);
                if(counter == 0) {
                    head = cur = temp;
                } else {
                    cur = cur.next = temp;
                }
                jinwei = true;
                counter++;
            } else {               
                int tempV = jinwei ? (l1.val + l2.val + 1) : (l1.val + l2.val);                
                temp = new ListNode(tempV);
                if(counter == 0) {
                    head = cur = temp;
                } else {
                    cur = cur.next = temp;
                }
                counter++;
                jinwei=false;
            }
            l1 = l1.next;
            l2 = l2.next;
        }
        if (jinwei) {
            cur = cur.next = new ListNode(1);
        }  
        System.out.println(head.next);
        return head;
        
    }
}